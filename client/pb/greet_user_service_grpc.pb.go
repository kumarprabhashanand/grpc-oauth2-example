// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: greet_user_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreetUserServiceClient is the client API for GreetUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetUserServiceClient interface {
	GreetUser(ctx context.Context, in *GreetUserRequest, opts ...grpc.CallOption) (*GreetUserResponse, error)
}

type greetUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetUserServiceClient(cc grpc.ClientConnInterface) GreetUserServiceClient {
	return &greetUserServiceClient{cc}
}

func (c *greetUserServiceClient) GreetUser(ctx context.Context, in *GreetUserRequest, opts ...grpc.CallOption) (*GreetUserResponse, error) {
	out := new(GreetUserResponse)
	err := c.cc.Invoke(ctx, "/com.grpc.example.GreetUserService/GreetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreetUserServiceServer is the server API for GreetUserService service.
// All implementations must embed UnimplementedGreetUserServiceServer
// for forward compatibility
type GreetUserServiceServer interface {
	GreetUser(context.Context, *GreetUserRequest) (*GreetUserResponse, error)
	mustEmbedUnimplementedGreetUserServiceServer()
}

// UnimplementedGreetUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGreetUserServiceServer struct {
}

func (UnimplementedGreetUserServiceServer) GreetUser(context.Context, *GreetUserRequest) (*GreetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GreetUser not implemented")
}
func (UnimplementedGreetUserServiceServer) mustEmbedUnimplementedGreetUserServiceServer() {}

// UnsafeGreetUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetUserServiceServer will
// result in compilation errors.
type UnsafeGreetUserServiceServer interface {
	mustEmbedUnimplementedGreetUserServiceServer()
}

func RegisterGreetUserServiceServer(s grpc.ServiceRegistrar, srv GreetUserServiceServer) {
	s.RegisterService(&GreetUserService_ServiceDesc, srv)
}

func _GreetUserService_GreetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetUserServiceServer).GreetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.grpc.example.GreetUserService/GreetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetUserServiceServer).GreetUser(ctx, req.(*GreetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GreetUserService_ServiceDesc is the grpc.ServiceDesc for GreetUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.grpc.example.GreetUserService",
	HandlerType: (*GreetUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GreetUser",
			Handler:    _GreetUserService_GreetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "greet_user_service.proto",
}
